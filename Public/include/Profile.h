////////////////////////////////////////////////////////////
//
// Profile.h
//
// Uses Profile.cpp
//
////////////////////////////////////////////////////////////
#ifndef PROFILE_H
#define PROFILE_H


#include <vector>
#include "Achievement.h"
#include <SFML\/Graphics.hpp>
#include <fstream>
#include <sstream>

#include <iostream>



using namespace std;
using namespace sf;


class Profile
{
public:

	static bool bInstanceFlag;
	static Profile *profile;
	static Profile* getInstance();


	////////////////////////////////////////////////////////////
	/// \brief Default Constructor
	///
	/// Creates an empty Profile
	///
	////////////////////////////////////////////////////////////
	Profile()
	{
		loadProfile("default");
	}

	////////////////////////////////////////////////////////////
	/// \brief Overloaded Constructor
	///
	/// Profile
	///
	/// \param location string path to the profile
	////////////////////////////////////////////////////////////
	Profile(string location);



	////////////////////////////////////////////////////////////
	/// \brief Default deConstructor
	///
	/// Deletes the profile 
	///
	////////////////////////////////////////////////////////////
	~Profile();

	////////////////////////////////////////////////////////////
	/// \brief fuction to save the content of the profile to a text file
	////////////////////////////////////////////////////////////
	void saveProfile();

	////////////////////////////////////////////////////////////
	/// \brief fuction to load the content of a text file to the profile
	////////////////////////////////////////////////////////////
	bool loadProfile(string name);

	////////////////////////////////////////////////////////////
	/// \brief fuction to create a new profile
	////////////////////////////////////////////////////////////
	void newProfile(string name);

	////////////////////////////////////////////////////////////
	/// \brief Name of the player using profile
	////////////////////////////////////////////////////////////
	string m_sProfileName;
	////////////////////////////////////////////////////////////
	/// \brief Level of the player
	////////////////////////////////////////////////////////////
	unsigned int m_uilevel;
	////////////////////////////////////////////////////////////
	/// \brief how much experience the player has earned
	////////////////////////////////////////////////////////////
	float m_fXP;
	////////////////////////////////////////////////////////////
	/// \brief total of how many pedestrians player has passed through a level
	////////////////////////////////////////////////////////////
	unsigned int m_uiPedestriansTotal;
	////////////////////////////////////////////////////////////
	/// \brief total of how many units player has passed through a level
	////////////////////////////////////////////////////////////
	unsigned int m_uiunitsTotal;
	////////////////////////////////////////////////////////////
	/// \brief total of how many crashes the the player has experienced
	////////////////////////////////////////////////////////////
	unsigned int m_uiCrashesTotal;
	////////////////////////////////////////////////////////////
	/// \brief total of how many pedestrains are hit by units
	////////////////////////////////////////////////////////////
	unsigned int m_uiFatalitiesTotal;
	////////////////////////////////////////////////////////////
	/// \brief average of how many units make it through a level in a minute
	////////////////////////////////////////////////////////////
	float m_fFlowRate;
	////////////////////////////////////////////////////////////
	/// \brief ratio of passed units/pedestrians against crashes and fatalities
	////////////////////////////////////////////////////////////
	float m_fPassRate = (m_uiunitsTotal + m_uiPedestriansTotal) / ((m_uiCrashesTotal + m_uiFatalitiesTotal)+1);

	////////////////////////////////////////////////////////////
	/// \brief game audio level
	////////////////////////////////////////////////////////////
	int m_iGameAudioVolume;

	////////////////////////////////////////////////////////////
	/// \brief interface audio level
	////////////////////////////////////////////////////////////
	int m_iInterfaceAudioVolume;

	////////////////////////////////////////////////////////////
	/// \brief music audio level
	////////////////////////////////////////////////////////////
	int m_iMusicAudioVolume;

	////////////////////////////////////////////////////////////
	/// \brief Graphics Resolution ( x , y)
	////////////////////////////////////////////////////////////
	Vector2f m_sfResolution;

	////////////////////////////////////////////////////////////
	/// \brief Fullscreen boolean
	////////////////////////////////////////////////////////////
	bool m_bFullscreen;

	////////////////////////////////////////////////////////////
	/// \brief high quality texures boolean
	////////////////////////////////////////////////////////////
	bool m_bTextures;


	
	
	private:
		////////////////////////////////////////////////////////////
		/// \brief Name of current profile used for singleton
		////////////////////////////////////////////////////////////
		string m_sProfile;





};
#endif

////////////////////////////////////////////////////////////
/// \class Profile.h
///
/// Profile.h is a data class that contains info for a profile
///
/// loads data in from a text file and stores data as public varibles
///
///
////////////////////////////////////////////////////////////
